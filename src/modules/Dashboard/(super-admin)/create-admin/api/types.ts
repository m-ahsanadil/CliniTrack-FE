import { AppointmentPriority, AppointmentStatus, AppointmentType } from "@/src/enum";

export interface PatientRef {
    _id: string;
    fullName: string;
}

export interface ProviderRef {
    _id: string;
    name: string;
}

export interface AppointmentLocation {
    facilityId: string;
    facilityName: string;
    roomNumber: string;
    address: string;
}

export interface BaseResponse {
    success: boolean;
    message: string;
}

export interface AppointmentRequest {
    _id?: string
    appointmentNumber: string; // WILL GENERATED BY THE FRONTEND
    patientId: string;  // WILL GET FROM THE GET PROVIDER 
    providerId: string;  // WILL GET FROM THE GET PATIENT
    departmentName: string;
    appointmentDate: string;
    startTime: string;
    endTime: string;
    duration: number;
    timeZone: string;
    type: AppointmentType.CONSULTATION | AppointmentType.EMERGENCY | AppointmentType.FOLLOW_UP | AppointmentType.PROCEDURE;
    priority: AppointmentPriority.HIGH | AppointmentPriority.LOW | AppointmentPriority.MEDIUM | AppointmentPriority.URGENT;
    status: AppointmentStatus.CANCELLED | AppointmentStatus.COMPLETED | AppointmentStatus.NO_SHOW | AppointmentStatus.RESCHEDULED | AppointmentStatus.SCHEDULED;
    location: AppointmentLocation;
    reasonForVisit: string;
    symptoms: string[];
    notes: string;
    createdBy: string;
    updatedBy: string;
}

export interface AppointmentResponse {
    success: true;
    message: string;
}

export interface AppointmentErrorResponse {
    success: false;
    message: string;
    data: string;
}

// Combined response type
export type AppointmentApiResponse = AppointmentResponse | AppointmentErrorResponse;

export interface Appointment {
    _id: string;
    appointmentNumber: string;
    location: AppointmentLocation;
    patientId: PatientRef;
    patientName: string;
    providerId: ProviderRef;
    providerName: string;
    departmentName: string;
    appointmentDate: string;
    startTime: string;
    endTime: string;
    duration: number;
    timeZone: string;
    type: AppointmentType.CONSULTATION | AppointmentType.EMERGENCY | AppointmentType.FOLLOW_UP | AppointmentType.PROCEDURE;
    priority: AppointmentPriority.HIGH | AppointmentPriority.LOW | AppointmentPriority.MEDIUM | AppointmentPriority.URGENT;
    status: AppointmentStatus.CANCELLED | AppointmentStatus.COMPLETED | AppointmentStatus.NO_SHOW | AppointmentStatus.RESCHEDULED | AppointmentStatus.SCHEDULED;
    reasonForVisit: string;
    symptoms: string[];
    notes: string;
    createdBy: string;
    updatedBy: string;

    remindersSent: any[];
    createdAt: string;
    updatedAt: string;
    __v: number;
}

export interface AppointmentGetResponse {
    success: true;
    count: number;
    data: Appointment[]
}

export interface AppointmentGetErrorResponse {
    success: false;
    message: string;
    data: string;
}

// Combined response type
export type AppointmentGetApiResponse = AppointmentGetResponse | AppointmentGetErrorResponse;

export interface AppointmentPostResponse {
    success: true;
    message: string;
    data: {
        _id: string;
        appointmentNumber: string;
        location: AppointmentLocation;
        patientId: string;
        patientName: string;
        providerId: string;
        providerName: string;
        departmentName: string;
        appointmentDate: string;
        startTime: string;
        endTime: string;
        duration: number;
        timeZone: string;
        type: AppointmentType.CONSULTATION | AppointmentType.EMERGENCY | AppointmentType.FOLLOW_UP | AppointmentType.PROCEDURE;
        priority: AppointmentPriority.HIGH | AppointmentPriority.LOW | AppointmentPriority.MEDIUM | AppointmentPriority.URGENT;
        status: AppointmentStatus.CANCELLED | AppointmentStatus.COMPLETED | AppointmentStatus.NO_SHOW | AppointmentStatus.RESCHEDULED | AppointmentStatus.SCHEDULED;
        reasonForVisit: string;
        symptoms: string[];
        notes: string;
        createdBy: string;
        updatedBy: string;
        __v: number;
        remindersSent: any[];
        createdAt: string;
        updatedAt: string;
    }
}

export interface AppointmentPostErrorResponse {
    success: false;
    message: string;
    data: string;
}

// Combined response type
export type AppointmentPostApiResponse = AppointmentPostResponse | AppointmentPostErrorResponse;


export interface AppointmentData {
    location: AppointmentLocation;
    _id: string;
    appointmentNumber: string;
    patientId: string;
    patientName: string;
    providerId: string;
    providerName: string;
    departmentName: string;
    appointmentDate: string; // ISO date string
    startTime: string;
    endTime: string;
    duration: number;
    timeZone: string;
    type: AppointmentType.CONSULTATION | AppointmentType.EMERGENCY | AppointmentType.FOLLOW_UP | AppointmentType.PROCEDURE;
    priority: AppointmentPriority.HIGH | AppointmentPriority.LOW | AppointmentPriority.MEDIUM | AppointmentPriority.URGENT;
    status: AppointmentStatus.CANCELLED | AppointmentStatus.COMPLETED | AppointmentStatus.NO_SHOW | AppointmentStatus.RESCHEDULED | AppointmentStatus.SCHEDULED;
    reasonForVisit: string;
    symptoms: string[];
    notes: string;
    createdBy: string;
    updatedBy: string;
    remindersSent: any[]; // Array type not specified in the example
    createdAt: string; // ISO date string
    updatedAt: string; // ISO date string
    __v: number;
}

export interface AppointmentUpdateResponse {
    success: boolean;
    message: string;
    data: AppointmentData;
}


// DELETE Appointment
export interface AppointmentDeleteResponse {
    success: boolean;
    message: string;
}

export interface AppointmentDeleteErrorResponse {
    success: false;
    message: string;
    data?: string;
}

export type AppointmentDeleteApiResponse = AppointmentDeleteResponse | AppointmentDeleteErrorResponse;

// PATCH METHOD CANCEL APPOINTMENT
export interface CancelAppointmentGetResponse {
    success: boolean;
    message: string;
    data: {
        location: AppointmentLocation;
        _id: string;
        appointmentNumber: string;
        patientId: string;
        patientName: string;
        providerId: string;
        providerName: string;
        departmentName: string;
        appointmentDate: string; // ISO string
        startTime: string;
        endTime: string;
        duration: number;
        timeZone: string;
        type: AppointmentType.CONSULTATION | AppointmentType.EMERGENCY | AppointmentType.FOLLOW_UP | AppointmentType.PROCEDURE;
        priority: AppointmentPriority.HIGH | AppointmentPriority.LOW | AppointmentPriority.MEDIUM | AppointmentPriority.URGENT;
        status: AppointmentStatus.CANCELLED | AppointmentStatus.COMPLETED | AppointmentStatus.NO_SHOW | AppointmentStatus.RESCHEDULED | AppointmentStatus.SCHEDULED;
        reasonForVisit: string;
        symptoms: string[];
        notes: string;
        createdBy: string;
        updatedBy: string;
        remindersSent: any[]; // You can type this more strictly if you know the structure
        createdAt: string; // ISO string
        updatedAt: string; // ISO string
        __v: number;
    };
}

export interface CancelAppointmentErrorResponse {
    success: false;
    message: string;
    errors: any[];
}

export type CancelAppointmentApiResponse = CancelAppointmentGetResponse | CancelAppointmentErrorResponse

// PATCH METHOD RESCHEDULE
export interface RescheduleAppointmentErrorResponse {
    success: false;
    message: string;
    errors: {
        [field: string]: {
            name: string;
            message: string;
            properties: {
                message: string;
                type: string;
                path: string;
            };
            kind: string;
            path: string;
        };
    };
}

export interface RescheduleAppointmentGetResponse {
    success: boolean;
    message: string;
    data: {
        appointmentNumber: string;
        patientId: string;
        patientName: string;
        providerId: string;
        providerName: string;
        departmentName: string;
        appointmentDate: string; // ISO date string
        startTime: string;
        endTime: string;
        duration: number;
        timeZone: string;
        type: string;
        priority: string;
        status: string;
        location: AppointmentLocation;
        reasonForVisit: string;
        symptoms: string[];
        notes: string;
        remindersSent: any[]; // Can be typed strictly if structure is known
        rescheduledFrom: string; // ISO date string
        createdBy: string;
        updatedBy: string;
        _id: string;
        createdAt: string; // ISO date string
        updatedAt: string; // ISO date string
        __v: number;
    };
}

export type RescheduleAppointmentApiResponse = RescheduleAppointmentGetResponse | RescheduleAppointmentErrorResponse

export interface AppointmentFilters {
    patientId?: string;
    providerId?: string;
    status?: Appointment['status'];
    type?: Appointment['type'];
    priority?: Appointment['priority'];
    dateFrom?: string;
    dateTo?: string;
    searchTerm?: string;
}

export interface AppointmentStats {
    total: number;
    scheduled: number;
    confirmed: number;
    cancelled: number;
    completed: number;
    noShow: number;
    rescheduled: number;
}